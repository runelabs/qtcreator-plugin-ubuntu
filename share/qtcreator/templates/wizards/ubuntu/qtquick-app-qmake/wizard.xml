<?xml version="1.0" encoding="UTF-8"?>
<wizard version="1" kind="project" firstpage="10" id="B_UbuntuAppSimpleQmake" category="A.UbuntuProject"
        platformIndependent="true"
        class="ubuntu-project-qmake"
                featuresRequired=""
        >
    <icon>../share/ubuntu.png</icon>
    <description>Creates a C++ Ubuntu application project with a sample UI containing a Label and a Button.

Also includes:
 - unit and functional tests for QML

This templates requires a Kit using at least a 15.04 click chroot.
</description>
    <displayname>QtQuick App with QML UI (qmake)</displayname>
    <displaycategory>Ubuntu</displaycategory>
    <files>
        <file source="projectName.pro"           target="%ProjectName%.pro" openproject="true"/>
<!-- MANIFEST PARTS -->
            <file source="manifest.json.in" openeditor="true"/>
<!-- APP PARTS -->
            <file source="appName/appName.pro"           target="%ClickHookName%/%ClickHookName%.pro" openeditor="false"/>
            <file source="appName/appName.qrc"           target="%ClickHookName%/%ClickHookName%.qrc" openeditor="false"/>
            <file source="appName/appName.png"           target="%ClickHookName%/%ClickHookName%.png" openeditor="false" binary="true"/>
            <file source="appName/Main.qml"          target="%ClickHookName%/Main.qml" openeditor="true"/>
            <file source="appName/main.cpp"          target="%ClickHookName%/main.cpp" openeditor="true"/>
            <file source="appName/appName.desktop"   target="%ClickHookName%/%ClickHookName%.desktop"  openeditor="false"/>
            <file source="appName/appName.apparmor"  target="%ClickHookName%/%ClickHookName%.apparmor" openeditor="false"/>
            <file source="appName/tests/autopilot/run"                            target="%ClickHookName%/tests/autopilot/run"                              openeditor="false"/>
            <file source="appName/tests/autopilot/displayName/tests/test_main.py" target="%ClickHookName%/tests/autopilot/%ProjectName%/tests/test_main.py" openeditor="false"/>
            <file source="appName/tests/autopilot/displayName/__init__.py"        target="%ClickHookName%/tests/autopilot/%ProjectName%/__init__.py"        openeditor="false"/>
            <file source="appName/tests/autopilot/displayName/tests/__init__.py"  target="%ClickHookName%/tests/autopilot/%ProjectName%/tests/__init__.py"  openeditor="false"/>
            <file source="appName/tests/unit/tst_main.qml"                        target="%ClickHookName%/tests/unit/tst_main.qml"                          openeditor="false"/>
   </files>
   
	  <!-- Create a 2nd wizard page with click package parameters -->
		<fieldpagetitle>Click package parameters</fieldpagetitle>
		<fields>
			<field mandatory="true" name="ClickDomain">
			  <fieldcontrol class="QLineEdit" validator='^[A-Za-z0-9-]+$'
			                defaulttext="" placeholdertext="Nickname"/>
			  <fielddescription>Nickname:</fielddescription>
			</field>
			<field mandatory="true" name="ClickMaintainer">
			  <fieldcontrol class="QLineEdit" validator='^[^"]+$'
			                defaulttext="" placeholdertext="Maintainer"/>
			  <fielddescription>Maintainer:</fielddescription>
			</field>
			<field mandatory="true" name="ClickHookName">
			  <fieldcontrol class="QLineEdit" validator='^[A-Za-z0-9.-]+$'
			                defaulttext="%ProjectName%" placeholdertext="app hook name"/>
			  <fielddescription>App name:</fielddescription>
			</field>
		  <field name="ClickFrameworkVersion">
		      <fieldcontrol class="QComboBox" defaultindex="0">
		          <comboentries>
								<!-- Do not add any other frameworks here, they are populated at runtime, this is just a dummy framework to make sure we can find the combobox -->
								<comboentry value="ubuntu-sdk-dummy-framework">
		                <comboentrytext>Dummy Framework</comboentrytext>
		            </comboentry>
		          </comboentries>
		      </fieldcontrol>
		      <fielddescription>Framework:</fielddescription>
		  </field>
		</fields>
    <validationrules>
        <validationrule condition='/^(.*)\s+&lt;(.*@.*)&gt;$/.test("%ClickMaintainer%")'>
            <message>Invalid format for maintainer (should be like "Joe Bloggs &lt;joe.bloggs@isp.com&gt;")</message>
        </validationrule>
    </validationrules>
</wizard>
